#N struct template2 float x float y;
#N struct template1 float x float y float z;
#N canvas 443 0 698 786 12;
#X text 19 721 see also:;
#X obj 21 10 pointer;
#X text 95 10 -- remember the location of a scalar in a list;
#N canvas 164 72 425 146 help-pointer-template1 0;
#X obj 18 81 filledpolygon z 0 1 0 0 20 0 20 30 0 30;
#X obj 60 21 struct template1 float x float y float z;
#X restore 329 528 pd help-pointer-template1;
#N canvas 26 456 510 145 help-pointer-template2 0;
#X obj 52 78 filledcurve 909 0 0 0 0 30 30 60 0 30 -30 0 0;
#X obj 60 21 struct template2 float x float y;
#X restore 329 551 pd help-pointer-template2;
#X obj 22 741 get;
#X obj 55 741 set;
#X obj 90 741 append;
#X obj 151 741 getsize;
#X obj 219 742 setsize;
#X obj 289 742 element;
#N canvas 2 132 312 147 help-pointer-data 0;
#X scalar template2 20 97 \;;
#X scalar template1 80 17 90 \;;
#X scalar template1 120 117 9 \;;
#X restore 329 506 pd help-pointer-data;
#X obj 53 509 pointer;
#X msg 54 231 traverse pd-help-pointer-data;
#X msg 63 255 bang;
#X msg 69 281 next;
#X obj 53 534 print out1;
#X obj 166 520 print out2;
#X text 28 576 Optional arguments to pointer allow you to select according
to the class of the scalar being output:;
#X msg 63 641 next;
#X msg 49 618 traverse pd-help-pointer-data;
#X obj 49 695 print template1;
#X obj 167 695 print template2;
#X obj 285 695 print other;
#X obj 403 695 print bangout;
#X text 279 231 sets to the "head" of the list;
#X text 29 34 "Pointer" is a storage object like "float" \, except
that the thing stored is the location of a scalar somewhere. You can
send a pointer a value (perhaps from another "pointer" object). The
right inlet takes pointers and simply stores them. A bang in the left
outputs the pointer \, and a pointer in the left both sets and outputs
the value.;
#X text 29 132 The value of a pointer can either indicate a real scalar
\, or else the "head" (before the first element) of the list. This
allows you to point to an empty list \, and also \, to "append" a scalar
to the beginning of the list.;
#X text 29 191 Pointers are "safe": if you delete a scalar pointers
to it are marked invalid.;
#X text 165 540 bang at end;
#X text 166 556 of list;
#X text 52 554 output;
#X obj 354 742 struct;
#X msg 71 313 vnext 1;
#X msg 75 427 send pointer-help;
#X text 109 256 output current value;
#X text 119 274 move forward one item and output pointer \; if we reach
the end \, a "bang" goes to out2.;
#X text 219 426 send pointer to a named object ->;
#X obj 467 425 r pointer-help;
#X obj 467 450 print pointer-help;
#X text 149 314 output the next object (if arg is 0) or the next selected
object (if arg is 1 -- but the window must be visible for the "selection"
to make sense).;
#X obj 49 669 pointer template1 template2, f 51;
#X msg 77 476 send-window vis \$1;
#X obj 77 454 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X text 219 477 send a message to the canvas containing the scalar
;
#X msg 75 374 delete;
#X text 147 370 delete the current object and output the next one (or
send a "bang to bangout if it was the last one in the list);
#X text 435 744 updated for Pd version 0.51;
#N canvas 228 274 548 340 equal 0;
#X obj 219 207 pointer;
#X msg 219 155 traverse pd-help-pointer-data \, bang;
#X msg 229 180 next;
#X obj 33 172 pointer;
#X msg 33 106 traverse pd-help-pointer-data \, bang;
#X msg 43 145 next;
#X msg 33 200 equal \$1;
#X obj 33 236 pointer template1 template2;
#X text 218 130 1) select a source;
#X text 32 83 2) compare different pointers with source;
#X obj 33 267 print equal;
#X obj 219 267 print not-equal;
#X text 29 21 The "equal" message allows to compare an incoming pointer
with the stored pointer. On success \, the pointer is sent to its corresponding
outlet. On fail \, a bang is sent through the right-most outlet.,
f 69;
#X text 236 235 you can also use template symbols;
#X connect 0 0 7 1;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 6 0;
#X connect 4 0 3 0;
#X connect 5 0 3 0;
#X connect 6 0 7 0;
#X connect 7 0 10 0;
#X connect 7 1 10 0;
#X connect 7 2 10 0;
#X connect 7 3 11 0;
#X restore 458 622 pd equal;
#X text 328 623 Pointer equality:, f 18;
#X connect 12 0 16 0;
#X connect 12 1 17 0;
#X connect 13 0 12 0;
#X connect 14 0 12 0;
#X connect 15 0 12 0;
#X connect 19 0 41 0;
#X connect 20 0 41 0;
#X connect 33 0 12 0;
#X connect 34 0 12 0;
#X connect 38 0 39 0;
#X connect 41 0 21 0;
#X connect 41 1 22 0;
#X connect 41 2 23 0;
#X connect 41 3 24 0;
#X connect 42 0 12 0;
#X connect 43 0 42 0;
#X connect 45 0 12 0;
